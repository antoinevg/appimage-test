on:
  push:
  pull_request:
  workflow_dispatch:

name: CI

env:
  IMAGE_NAME: ${{ github.repository }}-test
  IMAGE_TAG:  ${{ github.ref_name }}

defaults:
  run:
    shell: bash
    working-directory: /home/runner

jobs:
  test-remote:
    permissions:
      contents: read

    needs: create-test-docker-image

    name: Run test action
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/${{ needs.create-test-docker-image.outputs.NAME }}:${{ needs.create-test-docker-image.outputs.TAG }}
      options: --user root # see: https://github.com/actions/checkout/issues/1014
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check environment
        run: |
          echo PATH: $PATH
          echo HOME: $HOME
          echo pwd:  `pwd`
          ls -al

      - name: Test Action
        uses: ./appimage/test/
        with:
          executable: ./target/release/packetry


  create-test-docker-image:
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    name: Create Test Docker image
    runs-on: ubuntu-latest
    outputs:
      NAME: ${{ env.IMAGE_NAME }}
      TAG:  ${{ env.IMAGE_TAG }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if docker image exists
        id: check
        shell: bash
        run: |
          USER=antoinevg
          IMAGE=appimage-test-test
          TAG=main
          TOKEN=${{ secrets.DOCKER_REGISTRY_TOKEN }}
          declare -a HEADERS=(
            '-H' "Accept: application/vnd.oci.image.manifest.v1+json"
            '-H' "Accept: application/vnd.oci.image.index.v1+json"
            '-H' "Authorization: Bearer $(echo ${TOKEN} | base64)"
          )
          RESULT=$(curl "${HEADERS[@]}" https://ghcr.io/v2/${IMAGE_NAME}/manifests/${IMAGE_TAG}-niope)
          echo 'image<<EOF' >> $GITHUB_OUTPUT
          echo ${RESULT} | jq 'has("manifests")' >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Check if docker image exists output
        shell: bash
        run: |
          echo "We got this 1: ${{ steps.check.outputs.image }}"
          echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
          echo "IMAGE_TAG:  ${{ env.IMAGE_TAG  }}"
          echo "USER_NAME:  ${{ github.username }}"
          echo "ORG:        ${{ github.organization }}"

      - name: Check if check is true
        if: ${{ steps.check.outputs.image == 'true' }}
        run: |
          echo "IT WAS TRUE"

      - name: Check if check is false
        if: ${{ steps.check.outputs.image == 'false' }}
        run: |
          echo "IT WAS FALSE

      - uses: dorny/paths-filter@v3
        id: changed
        with:
          filters: |
            dockerfile:
              - "appimage/test/docker/**"

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: appimage/test/docker/
          push: true
          tags: ghcr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha, scope=${{ env.IMAGE_TAG }}
          cache-to:   type=gha,  scope=${{ env.IMAGE_TAG }}, mode=max

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
